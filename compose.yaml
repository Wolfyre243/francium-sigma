# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:

  # Start the pgveector database.
  # This will be the brain of our ecosystem and all memory will be stored here
  pgvector:
    image: pgvector/pgvector:0.7.4-pg16
    hostname: 127.0.0.1
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=francium-admin
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    secrets:
      - db-password
    volumes:
      - ./data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  # Start the pgAdmin web UI.
  # This is a useful tool for managing your PostgreSQL database.
  pgadmin4:
    image: dpage/pgadmin4
    ports:
      - 8080:80
      - 443:443
    environment:
      - PGADMIN_DEFAULT_EMAIL=wolfyreblueflare@gmail.com
      - PGADMIN_DEFAULT_PASSWORD_FILE=/run/secrets/db-password
    secrets:
      - db-password

  francium-s:
    image: fs-serv:latest
    ports:
      - 3030:3030

  francium-discord:
    image: francium-discord:latest
    ports:
      - 4000:4000

  # Start the Francium Chat application.
  # This is a simple chat interface to test and run the Ollama LLMs.
  francium-chat:
    image: francium-chat:v0.2.0
    ports:
      - 3000:3000
    build: .
    develop:
      watch:
        - action: sync
          path: ./app
          target: /usr/src/app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./app/package.json

  


# Store and load passwords
secrets:
  db-password:
    file: ./secrets/db-password.txt
    # If your application exposes a port, uncomment the following lines and change
    # the port numbers as needed. The first number is the host port and the second
    # is the port inside the container.
    # ports:
    #   - 8080:8080

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    #     depends_on:
    #       db:
    #         condition: service_healthy
    #   db:
    #     image: postgres
    #     restart: always
    #     user: postgres
    #     secrets:
    #       - db-password
    #     volumes:
    #       - db-data:/var/lib/postgresql/data
    #     environment:
    #       - POSTGRES_DB=example
    #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #     expose:
    #       - 5432
    #     healthcheck:
    #       test: [ "CMD", "pg_isready" ]
    #       interval: 10s
    #       timeout: 5s
    #       retries: 5
    # volumes:
    #   db-data:
    # secrets:
    #   db-password:
    #     file: db/password.txt
